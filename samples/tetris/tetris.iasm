globals: 48
jmp main
func:

# int a;
push DWORD 0

# return a = a = a = a;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD ebp
push QWORD 0
add QWORD
push QWORD ebp
push QWORD 0
add QWORD
push QWORD ebp
push QWORD 0
add QWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+20 eax
mov DWORD *ebp+28 *eax
mov DWORD *ebp+28 *ebp+20
subl QWORD esp 8 esp
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+12 eax
mov DWORD *ebp+20 *eax
mov DWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+4 eax
mov DWORD *ebp+12 *eax
mov DWORD *ebp+12 *ebp+4
subl QWORD esp 8 esp
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

malloc:
subl QWORD ebp 4 ebp

# return 0;
push DWORD 0
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

InitRNG:

# return;
mov QWORD ebp esp
ret

randomInt:
subl QWORD ebp 8 ebp

# return min;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push DWORD *eax
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

main:

# __globals_init();
push QWORD __globals_init
pop QWORD eax
call eax

# int size = sizeof(@funcptr<int>);
push DWORD 8

# int size2 = sizeof(Game*);
push DWORD 8

# Main(0, 0);
stackargs
push DWORD 0
push DWORD 0
push QWORD Main
pop QWORD eax
call eax
subl QWORD esp 4 esp

# return;
mov QWORD ebp esp
ret

Main:
subl QWORD ebp 12 ebp

# "System::GetMemoryMappedHWStartAddress";
push "System::GetMemoryMappedHWStartAddress"
subl QWORD esp 8 esp

# "VGAMonitor";
push "VGAMonitor"
subl QWORD esp 8 esp

# InitRNG();
push QWORD InitRNG
pop QWORD eax
call eax

# tetriminoFunctions[0] = CreateI;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateI
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[1] = CreateO;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateO
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[2] = CreateJ;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 2
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateJ
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[3] = CreateL;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 3
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateL
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[4] = CreateS;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 4
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateS
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[5] = CreateZ;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 5
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateZ
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# tetriminoFunctions[6] = CreateT;
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push DWORD 6
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push QWORD CreateT
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# "Timer::CallOnLoop";
push "Timer::CallOnLoop"
subl QWORD esp 8 esp

# game = malloc(sizeof(Game));
push QWORD erp
push QWORD 44
add QWORD
stackargs
push DWORD 44
push QWORD malloc
pop QWORD eax
call eax
mov QWORD *ebp+12 eax
movln *ebp+20 *eax 8
movln *ebp+20 *ebp+12 8
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# game.Board = malloc(sizeof(Board));
push QWORD erp
push QWORD 44
add QWORD
push QWORD 0
add QWORD
stackargs
push DWORD 16
push QWORD malloc
pop QWORD eax
call eax
mov QWORD *ebp+12 eax
movln *ebp+20 *eax 8
movln *ebp+20 *ebp+12 8
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# game.Board->Width = 10;
push QWORD erp
push QWORD 44
add QWORD
push QWORD 0
add QWORD
push QWORD 8
add QWORD
push DWORD 10
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# game.Board->Height = 20;
push QWORD erp
push QWORD 44
add QWORD
push QWORD 0
add QWORD
push QWORD 12
add QWORD
push DWORD 20
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# game.Board->Cells = malloc(10 * 20);
push QWORD erp
push QWORD 44
add QWORD
push QWORD 0
add QWORD
push QWORD 0
add QWORD
stackargs
push DWORD 10
push DWORD 20
mult DWORD
push QWORD malloc
pop QWORD eax
call eax
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp+12 eax
mov QWORD *ebp+20 *eax
mov QWORD *ebp+20 *ebp+12
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# int i;
push DWORD 0

# i = 0;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

block_1:
# while (i < 200)
push QWORD ebp
push QWORD 12
add QWORD
pop QWORD eax
push DWORD *eax
push DWORD 200
cmp DWORD
push QWORD eflags
push QWORD 1152921504606846976
bwand QWORD
push QWORD 60
rshift QWORD
mov QWORD 0 ecx
pop QWORD ecx
push DWORD ecx
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 0
cmp DWORD
jne block_2
je block_3

block_2:
# game.Board->Cells[i] = 0;
push QWORD erp
push QWORD 44
add QWORD
push QWORD 0
add QWORD
push QWORD 0
add QWORD
mov QWORD 0 eax
pop QWORD eax
push QWORD *eax
push QWORD ebp
push QWORD 12
add QWORD
pop QWORD eax
push DWORD *eax
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 1
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+16 eax
mov BYTE *ebp+24 *eax
mov BYTE *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 1 esp
subl QWORD esp 0 esp

# (i)++;
push QWORD ebp
push QWORD 12
add QWORD
pop QWORD eax
push DWORD *eax
incl DWORD *eax *eax
subl QWORD esp 4 esp
subl QWORD esp 0 esp
jmp block_1
block_3:
subl QWORD esp 0 esp

block_4:
# while (i != 0)
push QWORD ebp
push QWORD 12
add QWORD
pop QWORD eax
push DWORD *eax
push DWORD 0
cmp DWORD
push QWORD eflags
push QWORD 2305843009213693952
bwand QWORD
push QWORD 61
rshift QWORD
mov QWORD 0 ecx
pop QWORD ecx
push DWORD ecx
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 0
cmp DWORD
jne block_5
je block_6

block_5:
# break;
subl QWORD esp 0 esp
jmp block_6

# i = 5;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 5
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp
subl QWORD esp 0 esp
jmp block_4

block_6:
# switch (i)
push QWORD ebp
push QWORD 12
add QWORD
pop QWORD eax
push DWORD *eax
pop DWORD ebx
push DWORD ebx
push DWORD 2
cmp DWORD
je block_7
push DWORD ebx
push DWORD 1
cmp DWORD
je block_9
push DWORD ebx
push DWORD 0
cmp DWORD
je block_A
push DWORD ebx
push DWORD 4
cmp DWORD
je block_B
jmp block_C

block_7:
# i = 3;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 3
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# break;
subl QWORD esp 0 esp
jmp block_8

# i = 137;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 137
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp
subl QWORD esp 0 esp

block_8:
# return 0;
push DWORD 0
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

block_9:
# i = 5;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 5
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# break;
subl QWORD esp 0 esp
jmp block_8
subl QWORD esp 0 esp

block_A:
# i = 27;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 27
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# break;
subl QWORD esp 0 esp
jmp block_8
subl QWORD esp 0 esp

block_B:
# i = 341;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 341
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# break;
subl QWORD esp 0 esp
jmp block_8
subl QWORD esp 0 esp

block_C:
# i = 22;
push QWORD ebp
push QWORD 12
add QWORD
push DWORD 22
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+16 eax
mov DWORD *ebp+24 *eax
mov DWORD *ebp+24 *ebp+16
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# break;
subl QWORD esp 0 esp
jmp block_8
subl QWORD esp 0 esp

CreateI:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 3;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 3
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 2;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 2
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateO:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 252;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 252
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateJ:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 28;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 28
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(2);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 2
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateL:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 232;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 232
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(2);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 2
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateS:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 28;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 28
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 2;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 2
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateT:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 227;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 227
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

CreateZ:

# Tetrimino* result = malloc(sizeof(Tetrimino));
stackargs
push DWORD 33
push QWORD malloc
pop QWORD eax
call eax

# result.Color = 224;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 0
add QWORD
push DWORD 224
mov QWORD 0 ecx
pop DWORD ecx
push BYTE ecx
mov QWORD *ebp+5 eax
mov BYTE *ebp+13 *eax
mov BYTE *ebp+13 *ebp+5
subl QWORD esp 8 esp
subl QWORD esp 1 esp

# result.X0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 1
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y0 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 5
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X1 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 9
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y1 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 13
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X2 = 0;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 17
add QWORD
push DWORD 0
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.X3 = 1;
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 25
add QWORD
push DWORD 1
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# result.Y2 = -(1);
push QWORD ebp
push QWORD 0
add QWORD
push QWORD 21
add QWORD
push DWORD 1
mov QWORD 0 eax
pop DWORD eax
push DWORD 0
push DWORD eax
sub DWORD
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
mov QWORD *ebp+8 eax
mov DWORD *ebp+16 *eax
mov DWORD *ebp+16 *ebp+8
subl QWORD esp 8 esp
subl QWORD esp 4 esp

# return result;
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push QWORD *eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

RandomTetrimino:

# int next = randomInt(0, 6);
stackargs
push DWORD 0
push DWORD 6
push QWORD randomInt
pop QWORD eax
call eax

# return tetriminoFunctions[next]();
push QWORD erp
push QWORD 52
add QWORD
pop QWORD eax
push QWORD *eax
push QWORD ebp
push QWORD 0
add QWORD
pop QWORD eax
push DWORD *eax
mov QWORD 0 ecx
pop DWORD ecx
push DWORD ecx
push DWORD 8
mult DWORD
mov QWORD 0 ecx
pop DWORD ecx
push QWORD ecx
add QWORD
mov QWORD 0 eax
pop QWORD eax
push QWORD *eax
pop QWORD eax
call eax
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

HW_System_RegisterInterruptHandler:
subl QWORD ebp 20 ebp

# return 0 /* hardware call: System::RegisterInterruptHandler */;
stackargs
push DWORD *ebp
push QWORD *ebp+4
push QWORD *ebp+12
hwcall "System::RegisterInterruptHandler"
mov QWORD 0 eax
pop BYTE eax
mov QWORD ebp esp
push BYTE eax
ret

HW_System_UnregisterInterruptHandler:
subl QWORD ebp 13 ebp

# /* hardware call: System::UnregisterInterruptHandler */;
stackargs
push DWORD *ebp
push QWORD *ebp+4
push BYTE *ebp+12
hwcall "System::UnregisterInterruptHandler"

# return;
mov QWORD ebp esp
ret

HW_System_RaiseError:
subl QWORD ebp 4 ebp

# /* hardware call: System::RaiseError */;
stackargs
push DWORD *ebp
hwcall "System::RaiseError"

# return;
mov QWORD ebp esp
ret

HW_System_RegisterErrorHandler:
subl QWORD ebp 12 ebp

# /* hardware call: System::RegisterErrorHandler */;
stackargs
push DWORD *ebp
push QWORD *ebp+4
hwcall "System::RegisterErrorHandler"

# return;
mov QWORD ebp esp
ret

HW_System_UnregisterErrorHandler:
subl QWORD ebp 4 ebp

# /* hardware call: System::UnregisterErrorHandler */;
stackargs
push DWORD *ebp
hwcall "System::UnregisterErrorHandler"

# return;
mov QWORD ebp esp
ret

HW_System_GetLastErrorDescriptionSize:

# return 0 /* hardware call: System::GetLastErrorDescriptionSize */;
hwcall "System::GetLastErrorDescriptionSize"
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

HW_System_GetLastErrorDescription:
subl QWORD ebp 8 ebp

# /* hardware call: System::GetLastErrorDescription */;
stackargs
push QWORD *ebp
hwcall "System::GetLastErrorDescription"

# return;
mov QWORD ebp esp
ret

HW_System_GetHardwareDeviceCount:

# return 0 /* hardware call: System::GetHardwareDeviceCount */;
hwcall "System::GetHardwareDeviceCount"
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

HW_System_GetHardwareDeviceDescriptionSize:
subl QWORD ebp 4 ebp

# return 0 /* hardware call: System::GetHardwareDeviceDescriptionSize */;
stackargs
push DWORD *ebp
hwcall "System::GetHardwareDeviceDescriptionSize"
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

HW_System_GetHardwareDeviceDescription:
subl QWORD ebp 12 ebp

# /* hardware call: System::GetHardwareDeviceDescription */;
stackargs
push DWORD *ebp
push QWORD *ebp+4
hwcall "System::GetHardwareDeviceDescription"

# return;
mov QWORD ebp esp
ret

HW_System_GetAllHardwareDeviceDescriptionsSize:

# return 0 /* hardware call: System::GetAllHardwareDeviceDescriptionsSize */;
hwcall "System::GetAllHardwareDeviceDescriptionsSize"
mov QWORD 0 eax
pop QWORD eax
mov QWORD ebp esp
push QWORD eax
ret

HW_System_GetAllHardwareDeviceDescriptions:
subl QWORD ebp 8 ebp

# /* hardware call: System::GetAllHardwareDeviceDescriptions */;
stackargs
push QWORD *ebp
hwcall "System::GetAllHardwareDeviceDescriptions"

# return;
mov QWORD ebp esp
ret

HW_System_CreatePageTable:

# return 0 /* hardware call: System::CreatePageTable */;
hwcall "System::CreatePageTable"
mov QWORD 0 eax
pop DWORD eax
mov QWORD ebp esp
push DWORD eax
ret

HW_System_DestroyPageTable:
subl QWORD ebp 4 ebp

# /* hardware call: System::DestroyPageTable */;
stackargs
push DWORD *ebp
hwcall "System::DestroyPageTable"

# return;
mov QWORD ebp esp
ret

HW_System_ChangeCurrentPageTable:
subl QWORD ebp 4 ebp

# /* hardware call: System::ChangeCurrentPageTable */;
stackargs
push DWORD *ebp
hwcall "System::ChangeCurrentPageTable"

# return;
mov QWORD ebp esp
ret

HW_System_CopyMemory:
subl QWORD ebp 29 ebp

# /* hardware call: System::CopyMemory */;
stackargs
push BYTE *ebp
push DWORD *ebp+1
push QWORD *ebp+5
push QWORD *ebp+13
push QWORD *ebp+21
hwcall "System::CopyMemory"

# return;
mov QWORD ebp esp
ret

HW_TerminalDevice_Write:
subl QWORD ebp 8 ebp

# /* hardware call: TerminalDevice::Write */;
stackargs
push QWORD *ebp
hwcall "TerminalDevice::Write"

# return;
mov QWORD ebp esp
ret

HW_TerminalDevice_WriteLine:
subl QWORD ebp 8 ebp

# /* hardware call: TerminalDevice::WriteLine */;
stackargs
push QWORD *ebp
hwcall "TerminalDevice::WriteLine"

# return;
mov QWORD ebp esp
ret

HW_TerminalDevice_Read:

# return 0 /* hardware call: TerminalDevice::Read */;
hwcall "TerminalDevice::Read"
mov QWORD 0 eax
pop WORD eax
mov QWORD ebp esp
push WORD eax
ret

HW_TerminalDevice_ReadLine:
subl QWORD ebp 8 ebp

# /* hardware call: TerminalDevice::ReadLine */;
stackargs
push QWORD *ebp
hwcall "TerminalDevice::ReadLine"

# return;
mov QWORD ebp esp
ret

HW_Debugger_Break:

# /* hardware call: Debugger::Break */;
hwcall "Debugger::Break"

# return;
mov QWORD ebp esp
ret

__globals_init:

# stringLiteral = "Hello, world!";
push QWORD erp
push QWORD 68
add QWORD
push "Hello, world!"
mov QWORD 0 ecx
pop QWORD ecx
push QWORD ecx
mov QWORD *ebp eax
mov QWORD *ebp+8 *eax
mov QWORD *ebp+8 *ebp
subl QWORD esp 8 esp
subl QWORD esp 8 esp

# return;
mov QWORD ebp esp
ret

